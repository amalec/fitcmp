#!/usr/bin/env python

# fitcmp by Adrian Malec
# Displays vpfit-like plot for two fort.13 files for comparison.
# WARNING: All the fitting regions in each file must correspond.
# WARNING: I started writing this code when I commenced my PhD, it is terrible. Good luck. (I've been slowly refactoring the code though...)

VERSION = 0.99

import sys, os, readline, re
from optparse import OptionParser
from tempfile import NamedTemporaryFile

from matplotlib import use as useGUI

from vpstuff.vpcmp import *
from vpstuff.vphelper import show_error, termBold, termWarn, term
from vpstuff.vpeval import vpeval
from vpstuff.termcon import ProgressWrapper

if __name__ == "__main__":

	scriptpath = os.path.dirname(sys.argv[0])

	usage = "Usage: %prog [options] <vpfit executable path>"
	ver = "%prog " + str(VERSION)
	parser = OptionParser(usage=usage, version=ver)
	parser.add_option("-o", "--oldf13", dest="oldf", help="Old fort.13 file (optional)", default=False)
	parser.add_option("-n", "--newf13", dest="newf", help="New fort.13 file (fort.13 by default)", default="fort.13")
	parser.add_option("--scriptmode", dest="scriptmode", action="store_true", default=False, help="Disable visuals and windows")

	(options, args) = parser.parse_args()
	if args == []:
		show_error("No VPFIT executable path argument.\nNote: -v, --vpfit-path flag has been removed.\nA valid VPFIT executable path must now always be specified as an argument.\nSee --help for information.", True)

	vppath, oldf, newf, vpfix1, sm = args[0], options.oldf, options.newf, False, options.scriptmode

	if not sm:
		useGUI('TkAgg')
	else:
		useGUI('Agg')

	from string import ljust, strip, lower
	from matplotlib.pyplot import ion, close

	ion() # turn on matplotlib interactive mode

def main():
	global vppath, oldf, newf, vpfix1, sm
	
	def vpfix(n): # clean this up
		if n == 1:
			return vpfix1
	
	if not os.path.isfile(vppath):
		show_error("VPFIT executable: %s NOT FOUND" % vppath, True)
	if not os.path.isfile(newf):
		show_error("New fort.13 file: %s NOT FOUND" % newf, True)
	if not oldf:
		oldf = newf
	if not os.path.isfile(oldf):
		show_error("Old fort.13 file: %s NOT FOUND" % newf, True)
	
	try:
		rftList_old, c_old, rftList_new, c_new = readAllf17(oldf, newf, vppath, vpfix, scriptmode = sm)
		
		colour_config, tick_config = readColourConfig(scriptpath + '/colours.cfg')
		
		settings = {'vppath': vppath, 'plot_type': 1, 'flux_bottom': 1, 'tick_type': 1, 'group_delta': 0.07,
		            'tick_label': 1, 'plot_width': 650, 'plot_height': 490, 'vplot_width': 640, 'vplot_height': 1040,
		            'vel_res': 1, 'crs_display': 1, 'decompose_fit': 1, 'decomp_thresh': 0.999}
		
		# from: http://docs.python.org/library/readline.html
		histfile = os.path.join(os.path.expanduser("~"), ".f13cmphist")
		try:
		    readline.read_history_file(histfile)
		except IOError:
		    pass
		import atexit
		atexit.register(readline.write_history_file, histfile)
		#
		
		print "Available fitting regions:"
		
		listRegions(rftList_new)
		print
		selHelp()
		print
		fids = [[1, 1]] # Plot figure ID and fit ID
		
		showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
	except Exception as e:
		show_error(e, True)
		
	def livefit_callback(fit, enditer):
		iterprint(fit, enditer)
		tempf13 = NamedTemporaryFile(prefix = 'fort.13', dir = './')
		tempf13.write('   *\n')
		for rft in rftList_new:
			tempf13.write(rft[RFT_R][R_L])
		tempf13.write('   *\n')
		for i, l in enumerate(fit['fitprogress'][-1]['lines']):
			tempf13.write('   %s %s%s %s%s %s%s %s%s %s %s %s %s\n'
				% (l['ion'].ljust(8), l['N'].rjust(8), l['Nlbl'].ljust(2),
				l['z'].rjust(11), l['zlbl'].ljust(2),
				l['b'].rjust(9), l['blbl'].ljust(2),
				l['x4'].rjust(9), l['x4lbl'].ljust(2),
				l['bturb'].rjust(9),
				l['temp'].rjust(10),
				l['region'].rjust(2),
				l['cmid']))
		tempf13.flush()
		rftList_live, c_live = reloadAllFits(os.path.basename(tempf13.name), rftList_new, vppath, vpfix, silent = True)
		tempf13.close()
		showMultiPlots(fids, rftList_old, rftList_live, c_old, c_live, colour_config, tick_config, settings, live = True)
	
	while True:
		try:
			sin = raw_input("[" + termBold(str(fids[-1][1])) + "] ") # removed lower()
			sin = sin.split(';')
			for s in sin:
				s = strip(s)
				if s == '':
					showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
				elif s[0] == 'a':
					if len(s) == 1:
						autoold, autonew = True, True
					elif s == 'an':
						autoold, autonew = False, True
					elif s == 'ao':
						autoold, autonew = True, False
					else:
						print "Invalid 'a' command"
						continue
					print termWarn("[Entering autoreload mode, Ctrl+C, Enter to exit]")
					while 1:
						try:
							if autonew:
								rftList_new, c_new = reloadAllFits(newf, rftList_new, vppath, vpfix, scriptmode = sm, silent = True)
							if autoold:
								rftList_old, c_old = reloadAllFits(oldf, rftList_old, vppath, vpfix, scriptmode = sm, silent = True)
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						except KeyboardInterrupt:
							print termWarn("[Exiting autoreload mode]")
							break
				elif s[0] == 'v':
					vcmd = re.findall("v(n|o)[\s^\n]*/[\s^\n]*(([a-zA-Z0-9.]+)([\s^\n]*-[\s^\n]*([a-zA-Z0-9\s^\n,]+))?)([\s^\n]*/[\s^\n]*([+-]?[0-9]*\.?[0-9]+)[\s^\n]*,[\s^\n]*([+-]?[0-9]*\.?[0-9]+))?[\s^\n]*([\s^\n]*/[\s^\n]*([\\.a-zA-Z0-9_-]+))?[\s^\n]*", s)
					if len(vcmd) == 0:
						print "Invalid 'v' command"
						continue
					else:
						# print vcmd[0]
						rftList_old, c_old, rftList_new, c_new = readAllf17(oldf, newf, vppath, vpfix, scriptmode = sm)
						if vcmd[0][0] == 'n':
							rftList, comp = rftList_new, c_new
						else:
							rftList, comp = rftList_old, c_old
						tiedz_lbl = vcmd[0][2]
						if vcmd[0][6] != '':
							vlow = float(vcmd[0][6])
						else:
							vlow = None
						if vcmd[0][7] != '':
							vhigh = float(vcmd[0][7])
						else:
							vhigh = None
						if vcmd[0][4].strip() != '':
							splist = vcmd[0][4].strip().split(',')
							splist = [spl.strip() for spl in splist]
						else:
							splist = []
						if vcmd[0][9] != '':
							fname = vcmd[0][9]
						else:
							fname = None
							# print splist
				
					showStackPlot(tiedz_lbl, rftList, comp, colour_config, tick_config, settings, splist, vlow = vlow, vhigh = vhigh, cursor_on = True, saveFile = fname)
				elif s[0:2] == 'e/':
					vpeval(s[2:])
				elif s == 'n':
					fids[-1][1] = fids[-1][1] % len(rftList_new) + 1
					showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
				elif s == 'p':
					fids[-1][1] = (fids[-1][1] - 2) % len(rftList_new) + 1
					showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
				elif s == 'q' or s == 'quit' or s == 'exit':
					print "Quitting fitcmp."
					sys.exit()
				elif s == '?' or s == 'h' or s == 'help':
					selHelp()
				elif s == 'l':
					listRegions(rftList_new)
				elif s == '!':
					selLines(oldf, newf, rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new)
				elif s[0] == '^':
					if len(s) == 1:
						fids.append([fids[-1][0]+1, fids[-1][1]])
					elif s == '^c':
						for fid in fids:
							close(fid[0])
						fids = [[1, fids[-1][1]]]
					else:
						print "Invalid figure window command"
						continue
					showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
				elif s[:3] == 'ps/':
					exportAll(s[3:], rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings, ext = 'ps')
				elif s[:4] == 'eps/':
					exportAll(s[4:], rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings, ext = 'eps')
				elif s[:4] == 'pdf/':
					exportAll(s[4:], rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings, ext = 'pdf')
				elif s == 'f13':
					printf13Paths(oldf, newf)
				elif s[0] == 'f':
					elt = "([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)" # E float
					s0p, s1p = "[\s^\n]*", "[\s^\n]+"                # white space
					singleopt = lambda c: '(/[\s^\n]*%s[\s^\n]*=[\s^\n]*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)[\s^\n]*)?' % c
					csopt = '(/[\s^\n]*cs[\s^\n]*=[\s^\n]*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)[\s^\n]*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)[\s^\n]*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)[\s^\n]*)?$'
					fcmd = re.findall('f[\s^\n]*'+singleopt('n')+singleopt('b')+singleopt('z')+singleopt('x4')+csopt, s)
					varprintout = None
					nvar, bvar, zvar, x4var, csvar = '', '', '', '', ''
					if fcmd:
						nvar, bvar, zvar, x4var, csvar = fcmd[0][1], fcmd[0][4], fcmd[0][7], fcmd[0][10], fcmd[0][13]+' '+fcmd[0][15]+' '+fcmd[0][17]
						varprintout = ', '.join([istr + ivar for istr, ivar in zip(['n = ', 'b = ', 'z = ', 'x4 = ', 'cs = '], [nvar, bvar, zvar, x4var, csvar]) if ivar.strip()])
					if varprintout:
						print "Fitting using parameters %s ..." % varprintout
					else:
						print "Fitting..."
					print termWarn('[Use Ctrl+C to exit fitting mode]')
					
					livefit(vppath, newf, nvar, bvar, zvar, x4var, csvar, livefit_callback) ########### livefit
				elif s[0] == 'd':
					if s[:3] == 'dn/':
						dumpFits(s[3:],rftList_new, c_new)
					elif s[:3] == 'do/':
						dumpFits(s[3:],rftList_old, c_old)
					else:
						print "Invalid data dump command"
						continue
				elif s[0] == 'r':
					reloadmultifigs = True
					if len(s) == 1:
						rftList_old, c_old, rftList_new, c_new = readAllf17(oldf, newf, vppath, vpfix, scriptmode = sm)
					elif s == 'rc':
						rftList_old, c_old, rftList_new, c_new = reloadCFits(fids[-1][1], oldf, rftList_old, newf, rftList_new, vppath, vpfix, scriptmode = sm)
						reloadmultifigs = False
					elif s == 'rn':
						rftList_new, c_new = reloadAllFits(newf, rftList_new, vppath, vpfix, scriptmode = sm)
					elif s == 'ro':
						rftList_old, c_old = reloadAllFits(oldf, rftList_old, vppath, vpfix, scriptmode = sm)
					elif s == 'rcn':
						rftList_new, c_new = reloadFit(fids[-1][1], newf, rftList_new, vppath, vpfix, scriptmode = sm)
						reloadmultifigs = False
					elif s == 'rco':
						rftList_old, c_old = reloadFit(fids[-1][1], oldf, rftList_old, vppath, vpfix, scriptmode = sm)
						reloadmultifigs = False
					# else:
					# 	try:
					# 		rfid = int(s[1:])
					# 		if (rfid > len(rftList_new) or rfid < 1):
					# 			raise ValueError
					# 		rftList_old, c_old, rftList_new, c_new = reloadFit(rfid, oldf, rftList_old, c_old, newf, rftList_new, c_new, vppath, vpfix)
					# 	except ValueError:
					# 		print "Enter a valid fit id to reload"
					if reloadmultifigs:
						showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
					else:
						showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
				elif s[0] == '{':
					opt_match = re.match("{([\w ]+)?[, ]?([\w .]+)?}", s)
					if opt_match:
						if not opt_match.group(1) or not opt_match.group(2): 
							selOptionHelp()
							continue
					
						opt_name  = strip(opt_match.group(1))
						opt_value = strip(opt_match.group(2))
					
						if opt_name == 'plot_type' or opt_name == 'pt':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 5 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for plot_type option"
								continue
							settings['plot_type'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'plot_width' or opt_name == 'pw':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for plot_width option"
								continue
							settings['plot_width'] = opt_value
							for fid in fids:
								close(fid[0])
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'plot_height' or opt_name == 'ph':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for plot_height option"
								continue
							settings['plot_height'] = opt_value
							for fid in fids:
								close(fid[0])
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'vplot_width' or opt_name == 'vpw':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for vplot_width option"
								continue
							settings['vplot_width'] = opt_value
							for fid in fids:
								close(fid[0])
						elif opt_name == 'vplot_height' or opt_name == 'vph':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for vplot_height option"
								continue
							settings['vplot_height'] = opt_value
							for fid in fids:
								close(fid[0])
						elif opt_name == 'flux_bottom' or opt_name == 'fb':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 3 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for flux_bottom option"
								continue
							settings['flux_bottom'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'tick_type' or opt_name == 'tt':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 3 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for tick_type option"
								continue
							settings['tick_type'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'group_delta' or opt_name == 'gd':
							try:
								opt_value = float(opt_value)
								if opt_value <= 0.0 or opt_value > 100 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for group_delta option"
								continue
							settings['group_delta'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'tick_label' or opt_name == 'tl':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 2 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for group_delta option"
								continue
							settings['tick_label'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'vel_res' or opt_name == 'vr':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 2 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for vel_res option"
								continue
							settings['vel_res'] = opt_value
						elif opt_name == 'crs_display' or opt_name == 'cd':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 2 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for crs_display option"
								continue
							settings['crs_display'] = opt_value
						elif opt_name == 'decompose_fit' or opt_name == 'df':
							try:
								opt_value = int(opt_value)
								if opt_value < 1 or opt_value > 3 or opt_value == None:
									raise ValueError
							except ValueError:
								print "Invalid setting for decompose_fit option"
								continue
							settings['decompose_fit'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						elif opt_name == 'decomp_thresh' or opt_name == 'dt':
							try:
								opt_value = float(opt_value)
							except ValueError:
								print "Invalid setting for decomp_thresh option"
								continue
							settings['decompose_fit'] = opt_value
							showMultiPlots(fids, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings)
						else:
							selOptionHelp()
					else:
						print "Invalid option setting command"
						continue
				else:
					if re.match(".*open.*pod.*bay.*doors.*", lower(s)):
						print "I'm sorry, %s. I'm afraid I can't do that." % os.getenv('USER')
					try:
						nid = int(s)
						if (nid > len(rftList_new) or nid < 1):
							raise ValueError
						fids[-1][1] = nid
						showPlot(rftList_old[fids[-1][1]-1], rftList_new[fids[-1][1]-1], c_old, c_new, colour_config, tick_config, settings, figureid = fids[-1][0])
					except ValueError:
						print "Enter a valid fit id or command"
		except KeyboardInterrupt:
			while 1:
				s = lower(strip(raw_input("Are you sure you want to quit? y/[n]: ")))
				if s == 'y':
					print "Quitting fitcmp."
					sys.exit()
				elif s == '' or s == 'n':
					break
		except Exception as e:
			show_error(e)

def showMultiPlots(fidlist, rft_old, rft_new, comp_old, comp_new, colour_config, tick_config, settings, show = True, saveFile = '', live = False):
	for fid in fidlist:
		showPlot(rft_old[fid[1]-1], rft_new[fid[1]-1], comp_old, comp_new, colour_config, tick_config, settings, fid[0], show, saveFile, live)

def exportAll(fname, rftList_old, rftList_new, c_old, c_new, colour_config, tick_config, settings, ext = 'ps'):
	print "--- Exporting %s files" % ext
	for i in range(len(rftList_new)):
		fn = '%s_%s.%s' % (fname, str(i+1).zfill(len(str(len(rftList_new)))), ext)
		showPlot(rftList_old[i], rftList_new[i], c_old, c_new, colour_config, tick_config, settings, show = False, saveFile = fn)

def printf13Paths(oldf, newf):
	print "Old fort.13 path: %s" % abspath(oldf)
	print "New fort.13 path: %s" % abspath(newf)

def reloadOneFit(rfid, f13, rftList, vppath, vpfix, pr = None):
	#print "--- Reloading region data"
	#print "---"
	tmpRList, c = readFort13(f13, pr)
	for i in range(len(tmpRList)):
		rftList[i][RFT_R] = tmpRList[i]
	#print "--- Reloading fit data"
	#print "---"
	rftList[rfid-1][RFT_F], rftList[rfid-1][RFT_T] = vpf17ReadAll(f13, vppath, len(tmpRList), vpfix, pr, rfid)[0]
	return rftList, c

def reloadFit(rfid, f13, rftList, vppath, vpfix, scriptmode = False, silent = False):
	if silent or scriptmode:
		pr = None
	else:
		pr = ProgressWrapper(term, 'Reloading data for fit %d' % (rfid), PR_F13READ+PR_F17GENERATE+PR_F17READ)
	rftList, c = reloadOneFit(rfid, f13, rftList, vppath, vpfix, pr)
	if not (silent or scriptmode):
		pr.clear()
	if scriptmode:
		print term.render('${GREEN}${BOLD}Reloading data for fit %d...${NORMAL}' % (rfid))
	return rftList, c

def reloadCFits(rfid, oldf, rftList_old, newf, rftList_new, vppath, vpfix, scriptmode = False):
	if scriptmode:
		pr = None
	else:
		pr = ProgressWrapper(term, 'Reloading old and new data for fit %d' % (rfid), (PR_F13READ+PR_F17GENERATE+PR_F17READ)*2)
	rftList_old, c_old = reloadOneFit(rfid, oldf, rftList_old, vppath, vpfix, pr)
	rftList_new, c_new = reloadOneFit(rfid, newf, rftList_new, vppath, vpfix, pr)
	if not scriptmode:
		pr.clear()
	if scriptmode:
		print term.render('${GREEN}${BOLD}Reloading old and new data for fit %d...${NORMAL}' % (rfid))
	return rftList_old, c_old, rftList_new, c_new

def reloadAllFits(f, rftList, vppath, vpfix, scriptmode = False, silent = False):
	if silent or scriptmode:
		pr = None
	else:
		pr = ProgressWrapper(term, 'Retrieving data for all fits', (PR_F13READ+PR_F17GENERATE+PR_F17READ))
	rftList, c = vpf17AutomateAll(f, vppath, vpfix, pr)
	if not (silent or scriptmode):
		pr.clear()
	if scriptmode:
		print term.render('${GREEN}${BOLD}Retrieving data for all fits...${NORMAL}')
	return rftList, c

def selLines(oldf, newf, rft_old, rft_new, c_old, c_new):
	print "Old file (%s)" % oldf
	getLines(rft_old, c_old)
	print
	print "New file (%s)" % newf
	getLines(rft_new, c_new)

def getLines(rft, c):
	cids = tExtract(rft, T_COM)
	sl = [[strip(c[i][C_L]), i] for i in range(len(c)) if (i+1 in cids)]
	for i in range(len(sl)):
		print ljust("<%d>" % (sl[i][1]+1), 9) + sl[i][0]

def readAllf17(oldf, newf, vppath, vpfix, scriptmode = False):
	if scriptmode:
		pr = None
	else:
		pr = ProgressWrapper(term, 'Retrieving data for all fits', (PR_F13READ+PR_F17GENERATE+PR_F17READ)*2)
	
	#print "--- Reading %s and retrieving fort.17 data for all fits..." % oldf
	#print "---"
	rftList_old, c_old = vpf17AutomateAll(oldf, vppath, vpfix, pr)
	
	#print "--- Reading %s and retrieving fort.17 data for all fits..." % newf
	#print "---"
	rftList_new, c_new = vpf17AutomateAll(newf, vppath, vpfix, pr)
	
	#print "--- Done."
	
	if not scriptmode:
		pr.clear()
		
	if scriptmode:
		print term.render('${GREEN}${BOLD}Retrieving data for all fits...${NORMAL}')
	
	return rftList_old, c_old, rftList_new, c_new

def selOptionHelp():
	print "Available options and settings:"
	print termBold(" option (shrtver)   setting        description")
	print          " plot_type (pt)     1*             data hist, fit line"
	print          "                    2              data hist, fit hist"
	print          "                    3              data line, fit line"
	print          "                    4              data point w/ err, fit line"
	print          "                    5              data err contour, fit line"
	print          " plot_width (pw)    650*           plot width, in pixels"
	print          " plot_height (ph)   490*           plot height, in pixels"
	print          " vplot_width (vpw)  640*           as above, for velocity stack plot"
	print          " vplot_height (vph) 1040*          "
	print          " flux_bottom (fb)   1*             bottom flux limit is 0"
	print          "                    2              bottom flux limit is min(data or fit) rounded"
	print          "                    3              bottom flux limit is min(data or fit)"
	print          " tick_type (tt)     1*             normal tick marks"
	print          "                    2              group fine/isotopic structure lines"
	print          "                    3              oscillator strength weighted wv's"
	print          " tick_label (tl)    1*             smart z label (if available), IDs"
	print          "                    2              IDs only"
	print          " group_delta (gd)   0.07*          grouping delta for tt option 2 in Angstroms"
	print          " vel_res (vr)       1*             don't show residuals in velocity stack plot"
	print          "                    2              display individual residuals"
	print          " crs_display (cd)   1*             show CRS in velicity stack plot"
	print          "                    2              turn off CRS"
	print          " decompose_fit (df) 1*             do not decompose fit"
	print          "                    2              plot individual fit components (new)"
	print          "                    3              plot individual fit components (old)"
	print          " decomp_thresh (dt) 0.999          upper threshold for plotting decomposed lines"
	print          " * = default setting"

def selHelp():
	print "Commands: (use ; to separate multiple entries)"
	print termBold(" <n>") + "                        - Select <n> fit for display"
	print termBold(" n") + "                          - Display next region"
	print termBold(" p") + "                          - Display previous region"
	print termBold(" l") + "                          - List all regions"
	print termBold(" !") + "                          - Print all lines within region, for new and old fort.13 files"
	print termBold(" ^[c]") + "                       - Create a new figure window or [c]lose all figure windows"
	print termBold(" r") + "                          - Reload all fort.17 data for new and old fort.13 files"
	# print termBold(" r<n>") + "                       - Reload all fort.17 data for <n> fit"
	print termBold(" rc") + "                         - Reload all fort.17 data for current region"
	print termBold(" r[n,o]") + "                     - Reload all fort.17 data for new/old fort.13 file"
	print termBold(" rc[n,o]") + "                    - Reload all fort.17 data for new/old fort.13, current region only"
	print termBold(" a[n,o]") + "                     - Autoreload mode for new/old fort.13, current region"
	print termBold(" v[n,o]/lbl[-sp,]/vmin,vmax") + " - Velocity stack plot around the lines with label lbl,"
	print termBold(" /<f>") + "                         vmin/max are opt, sp is a comma-delimited subset of species,"
	print                "                              <f> is an optional outputfile, ext. determines filetype; no display."
	print                "                              lbl can be a redshift value instead if prefixed with 'red'"
	print                "                              species option is highly recommended; e.g. red1.0225828-MgI"
	print termBold(" e/expr") + "                     - Evaluates expression, atom.dat lookup using e.g. {H I 1215}"
	print termBold(" f/n=<v>/b=<v>/z=<v>/x4=<v>") + " - Uses VPFIT (version 10 only) to fit new fort.13 file. n, b, z, x4"
	print termBold(" /cs=<v> <v> <v>") + "              and cs are each optional VPFIT parameters (but must be in order)"
	print termBold(" (e)ps/<f>") + "                  - Output all displays to sequentially named <f>_n.[e]ps files"
	print termBold(" pdf/<f>") + "                    - Output all displays to sequentially named <f>_n.pdf files"
	print termBold(" f13") + "                        - Prints the paths of the fort.13 files in use"
	print termBold(" d[n,o]/<f>") + "                 - Dump data files (for plots, analysis, etc) for new/old fort.13 file"
	print termBold(" {option,setting}") + "           - Set option. Use {} to see available options"
	print termBold(" ?") + "                          - Show this message"
	print termBold(" q") + "                          - Quit immediately"

def listRegions(rftList):
	fidl = 1
	for rft in rftList:
		print ljust("(%d)" % fidl, 6) + strip(rft[RFT_R][R_L])
		fidl += 1

if __name__ == "__main__":
    main()
